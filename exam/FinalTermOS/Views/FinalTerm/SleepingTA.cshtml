@* Views/FinalTerm/SleepingTA.cshtml *@
@{
    ViewData["Title"] = "睡覺的助教 (Sleeping TA)";
}

<h1>@ViewData["Title"]</h1>

<div class="simulation-controls">
    <div class="form-group">
        <label for="numberOfStudents">學生總數:</label>
        <input type="number" id="numberOfStudents" name="numberOfStudents" class="form-control" value="10" min="1">
    </div>
    <div class="form-group">
        <label for="numberOfChairs">走廊椅子數量:</label>
        <input type="number" id="numberOfChairs" name="numberOfChairs" class="form-control" value="5" min="0">
    </div>
     <p id="simulationMessage">點擊 "開始模擬" 按鈕來啟動。</p>
    <button id="startSimulationBtn" class="btn btn-primary">開始模擬</button>
    <button id="stopSimulationBtn" class="btn btn-danger" disabled>停止模擬</button> 

    <div class="form-group form-check">
        <input type="checkbox" class="form-check-input" id="studentLoopToggle" checked>
        <label class="form-check-label" for="studentLoopToggle">學生服務完後繼續循環</label>
     </div>

</div>

<hr>

<div id="simulationStatusDisplay">
    <h2>模擬狀態</h2>
    <div id="taStatus">TA 狀態: 未啟動</div>
    <div id="chairsContainer" style="display: flex; gap: 10px; margin-bottom: 20px;">
    @* Chairs will be dynamically added here by JS *@
    </div>
    <div id="waitingQueueStatus">等待隊列: 未啟動</div>
    <h3>學生狀態</h3>
    <div id="studentsContainer" style="display: flex; flex-wrap: wrap; gap: 10px;">
        @* Student blocks will be dynamically added here *@
    </div>
</div>

@section Scripts {
    <script>
        let simulationInterval;

        function updateSimulationStatus() {
            $.ajax({
                url: '@Url.Action("GetSleepingTASimulationStatus", "FinalTerm")',
                type: 'GET',
                success: function(status) {
                    console.log("Received status data:", status);

                    // Check if simulation is reported as not running
                    if (status.isRunning === false) {
                        clearInterval(simulationInterval); // Stop the interval
                        $('#simulationMessage').text(status.message || '模擬已停止。'); // Update message
                        $('#startSimulationBtn').prop('disabled', false); // Enable start button
                        $('#stopSimulationBtn').prop('disabled', true);  // Disable stop button
                         // Optionally clear the status display
                        $('#taStatus').text('TA 狀態: 未啟動');
                        $('#chairsStatus').text('走廊椅子: 未啟動');
                        $('#waitingQueueStatus').text('等待隊列: 未啟動');
                        $('#studentsList').empty();
                        $('#chairsContainer').empty();
                        $('#studentsContainer').empty();
                        $('#studentLoopToggle').prop('disabled', false); // Enable student loop toggle for next run
                        $('#numberOfStudents').prop('disabled', false); // Enable inputs
                        $('#numberOfChairs').prop('disabled', false); // Enable inputs
                        return; // Stop further updates
                    }
                    // if running
                    $('#numberOfStudents').prop('disabled', true);
                    $('#numberOfChairs').prop('disabled', true);
                    $('#studentLoopToggle').prop('disabled', true);

                    // TA & student status 20250517
                    const taStatusElement = $('#taStatus');
                    taStatusElement.text('TA 狀態: ' + getTAStateText(status.taState));
                    taStatusElement.removeClass('ta-sleeping ta-helping ta-checking')
                    .addClass('ta-' + getTAStateText(status.taState).toLowerCase().replace(/[^a-z0-9]/g, ''));
                    // Modified getTAStateText (JavaScript helper)
                    function getTAStateClass(state) { // New function name for clarity
                        switch(state) {
                            case 0: return 'ta-sleeping';
                            case 1: return 'ta-helping';
                            case 2: return 'ta-checking';
                            default: return '';
                        }
                    }
                    // Update TA status call:
                    taStatusElement.removeClass('ta-sleeping ta-helping ta-checking')
                                .addClass(getTAStateClass(status.taState));
                    taStatusElement.text('TA 狀態: ' + getTAStateText(status.taState)); // Still use getTAStateText for text


                    

                    $('#taStatus').text('TA 狀態: ' + getTAStateText(status.taState));
                    $('#chairsStatus').text('走廊椅子: ' + (status.availableChairs) + ' 可用');
                    $('#waitingQueueStatus').text('等待隊列人數: ' + status.waitingQueueCount);

                    const studentsList = $('#studentsList');
                    studentsList.empty();

                    if (status.students && Array.isArray(status.students)) {
                        status.students.forEach(student => {
                            console.log("Processing student:", student); // Log the entire student object
                            console.log("Student ID:", student.id);     // Verify id access
                            console.log("Student State (raw):", student.state); // Verify state access before function call
                            console.log("Student State (text):", getStudentStateText(student.state)); // Verify function call result

                            studentsList.append(`<li>學生 ${student.id}: ${getStudentStateText(student.state)}</li>`);
                            const listItem = $(`<li>學生 ${student.id}: ${getStudentStateText(student.state)}</li>`);
                    // Add class based on student state
                        });
                    } else {
                        console.warn("Received status.students is not a valid array:", status.students);
                    }
                    // chair
                    const totalChairs = parseInt($('#numberOfChairs').val()); // Get total chairs from input
                    const availableChairs = status.availableChairs;
                    const occupiedChairs = totalChairs - availableChairs;

                    const chairsContainer = $('#chairsContainer');
                    chairsContainer.empty(); // Clear previous chairs

                    for (let i = 0; i < totalChairs; i++) {
                        const chairDiv = $(`<div class="chair"></div>`);
                        if (i < occupiedChairs) {
                            chairDiv.addClass('chair-occupied').text('佔用');
                        } else {
                            chairDiv.addClass('chair-empty').text('空位');
                        }
                        chairsContainer.append(chairDiv);
                    }
                    // student 
                    const studentsContainer = $('#studentsContainer');
                    studentsContainer.empty();

                    if (status.students && Array.isArray(status.students)) {
                        status.students.forEach(student => {
                            const studentBlock = $(`<div class="student-block">
                                                        <div>學生 <span class="math-inline">${student.id}</div>
                            <div class="student-state-text">${getStudentStateText(student.state)}</div>
                            </div>`);
                            studentBlock.addClass(getStudentStateClass(student.state)); // Apply class for color
                            studentsContainer.append(studentBlock);
                        });
                    }

                },
                error: function(error) {
                    console.error("獲取模擬狀態時發生錯誤", error);
                    // Stop the interval on error
                    clearInterval(simulationInterval);
                    $('#simulationMessage').text('獲取狀態失敗，模擬可能已停止或出錯。');
                    $('#startSimulationBtn').prop('disabled', false);
                    $('#stopSimulationBtn').prop('disabled', true);
                }
            });
        }

        // Helper functions remain the same...
        // 輔助函數，將狀態數字轉換為文字 (對應 C# 的枚舉順序)
        function getTAStateText(state) {
            switch(state) {
                case 0: return '睡覺中';
                case 1: return '正在幫助學生';
                case 2: return '檢查隊列';
                default: return '未知';
            }
        }

         // 輔助函數，將狀態數字轉換為文字 (對應 C# 的枚舉順序)
        function getStudentStateText(state) {
            switch(state) {
                case 0: return '思考中';
                case 1: return '尋求幫助';
                case 2: return '等待中 (椅子上)';
                case 3: return '正在被幫助';
                case 4: return '離開';
                case 5: return '被幫助，已離開';
                default: return '未知';
            }
        }
        // class name for student
        function getStudentStateClass(state) { 
            switch(state) {
                case 0: return 'student-thinking';
                case 1: return 'student-seeking';
                case 2: return 'student-waiting';
                case 3: return 'student-getting-help';
                case 4: return 'student-leaving';
                case 5: return 'student-finished'; // If you add a finished state (enum 5)
                default: return '';
            }
        }

        $(document).ready(function() {
            // Start Button Click Handler
            $('#startSimulationBtn').click(function() {
                const students = $('#numberOfStudents').val();
                const chairs = $('#numberOfChairs').val();
                // Get the state of the student loop toggle
                const loopStudents = $('#studentLoopToggle').is(':checked');


                if (students > 0 && chairs >= 0) {
                    if (simulationInterval) {
                        clearInterval(simulationInterval);
                    }

                    // Disable start button, enable stop button
                    $('#startSimulationBtn').prop('disabled', true);
                    $('#stopSimulationBtn').prop('disabled', false);

                    $.ajax({
                        url: '@Url.Action("StartSleepingTASimulation", "FinalTerm")',
                        type: 'POST',
                         // Pass the loopStudents setting to the backend
                        data: { numberOfStudents: students, numberOfChairs: chairs, loopStudents: loopStudents },
                        success: function(response) {
                            console.log("模擬啟動請求已收到", response);
                             $('#simulationMessage').text(response.message || '模擬正在進行...');
                             // Start the periodic status update
                             simulationInterval = setInterval(updateSimulationStatus, 500);
                        },
                        error: function(error) {
                            console.error("啟動模擬時發生錯誤", error);
                             $('#simulationMessage').text('啟動模擬失敗！');
                             $('#startSimulationBtn').prop('disabled', false); // Enable start button on error
                             $('#stopSimulationBtn').prop('disabled', true);
                        }
                    });
                } else {
                    alert('請輸入有效的學生數量 (至少 1) 和椅子數量 (至少 0)。');
                }
            });

            // Stop Button Click Handler
            $('#stopSimulationBtn').click(function() {
                 // Disable stop button immediately
                 $('#stopSimulationBtn').prop('disabled', true);
                 $('#simulationMessage').text('正在發送停止請求...');

                 $.ajax({
                    url: '@Url.Action("StopSleepingTASimulation", "FinalTerm")',
                    type: 'POST',
                    success: function(response) {
                        console.log("模擬停止請求已收到", response);
                        // The interval will be stopped when GetSleepingTASimulationStatus reports not running
                        // $('#simulationMessage').text(response.message || '模擬停止中...');
                        // clearInterval(simulationInterval); // Optional: Stop interval here too, but relies on backend reporting stop
                    },
                     error: function(error) {
                         console.error("發送停止請求時發生錯誤", error);
                         $('#simulationMessage').text('發送停止請求失敗！');
                         $('#stopSimulationBtn').prop('disabled', false); // Re-enable stop on error
                     }
                 });
            });

            window.addEventListener('beforeunload', function (e) {
                    if ($('#stopSimulationBtn').prop('disabled') === false) { // If stop button is enabled, simulation is running
                    e.preventDefault(); // Cancel the event
                    e.returnValue = ''; // Chrome requires returnValue to be set
                    alert('模擬正在運行中。離開頁面不會停止後台模擬。請先點擊「停止模擬」。');
                }
             });

        });
    </script>
}
<style>
    /* Style for TA status */
    #taStatus {
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.5s ease; /* Smooth color transition */
    }
    .ta-sleeping { background-color: #e0e0e0; color: #555; } /* Grey */
    .ta-helping { background-color: #d4edda; color: #155724; } /* Light Green */
    .ta-checking { background-color: #ffeeba; color: #856404; } /* Light Yellow */

    /* Style for student list items */
    #studentsList li {
        padding: 5px 10px;
        margin-bottom: 5px;
        border-radius: 3px;
        transition: background-color 0.5s ease;
    }
    .student-thinking { background-color: #f8f9fa; } /* Light grey */
    .student-seeking { background-color: #ffe0b3; } /* Light orange */
    .student-waiting { background-color: #e6e6fa; } /* Lavender */
    .student-getting-help { background-color: #cce5ff; } /* Light blue */
    .student-leaving { background-color: #f0f0f0; } /* Lighter grey */
    .student-finished { background-color: #6c757d; color: white; } /* Dark grey */

    .chair {
        width: 50px;
        height: 50px;
        border: 2px solid #333;
        border-radius: 5px;
        background-color: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: bold;
        transition: background-color 0.5s ease;
    }
    .chair-occupied {
        background-color: #b0e0e6; /* Light blue for occupied */
        color: #333;
    }
    .chair-empty {
        background-color: #f0f0f0; /* Light grey for empty */
        color: #888;
    }
    .student-block {
        width: 80px;
        height: 80px;
        border: 1px solid #ccc;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
            font-size: 14px;
        transition: background-color 0.5s ease, border-color 0.5s ease;
    }
    .student-thinking { background-color: #f8f9fa; }
    .student-seeking { background-color: #ffe0b3; }
    .student-waiting { background-color: #e6e6fa; }
    .student-getting-help { background-color: #cce5ff; }
    .student-leaving { background-color: #f0f0f0; }
    .student-finished { background-color: #6c757d; color: white; }
</style>

   
